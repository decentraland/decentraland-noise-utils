{"version":3,"file":"index.js","sources":["../src/noise.ts"],"sourcesContent":["export class Noise {\n  static grad3: Grad[]\n  static p: number[]\n  static perm: Array<number>\n  static gradP: Array<Grad>\n  static F2: number\n  static G2: number\n  static F3: number\n  static G3: number\n  static initialized: boolean = false\n\n  static Init(seed?: number) {\n    this.initialized = true\n    this.grad3 = [\n      new Grad(1, 1, 0),\n      new Grad(-1, 1, 0),\n      new Grad(1, -1, 0),\n      new Grad(-1, -1, 0),\n      new Grad(1, 0, 1),\n      new Grad(-1, 0, 1),\n      new Grad(1, 0, -1),\n      new Grad(-1, 0, -1),\n      new Grad(0, 1, 1),\n      new Grad(0, -1, 1),\n      new Grad(0, 1, -1),\n      new Grad(0, -1, -1),\n    ]\n\n    this.p = [\n      151,\n      160,\n      137,\n      91,\n      90,\n      15,\n      131,\n      13,\n      201,\n      95,\n      96,\n      53,\n      194,\n      233,\n      7,\n      225,\n      140,\n      36,\n      103,\n      30,\n      69,\n      142,\n      8,\n      99,\n      37,\n      240,\n      21,\n      10,\n      23,\n      190,\n      6,\n      148,\n      247,\n      120,\n      234,\n      75,\n      0,\n      26,\n      197,\n      62,\n      94,\n      252,\n      219,\n      203,\n      117,\n      35,\n      11,\n      32,\n      57,\n      177,\n      33,\n      88,\n      237,\n      149,\n      56,\n      87,\n      174,\n      20,\n      125,\n      136,\n      171,\n      168,\n      68,\n      175,\n      74,\n      165,\n      71,\n      134,\n      139,\n      48,\n      27,\n      166,\n      77,\n      146,\n      158,\n      231,\n      83,\n      111,\n      229,\n      122,\n      60,\n      211,\n      133,\n      230,\n      220,\n      105,\n      92,\n      41,\n      55,\n      46,\n      245,\n      40,\n      244,\n      102,\n      143,\n      54,\n      65,\n      25,\n      63,\n      161,\n      1,\n      216,\n      80,\n      73,\n      209,\n      76,\n      132,\n      187,\n      208,\n      89,\n      18,\n      169,\n      200,\n      196,\n      135,\n      130,\n      116,\n      188,\n      159,\n      86,\n      164,\n      100,\n      109,\n      198,\n      173,\n      186,\n      3,\n      64,\n      52,\n      217,\n      226,\n      250,\n      124,\n      123,\n      5,\n      202,\n      38,\n      147,\n      118,\n      126,\n      255,\n      82,\n      85,\n      212,\n      207,\n      206,\n      59,\n      227,\n      47,\n      16,\n      58,\n      17,\n      182,\n      189,\n      28,\n      42,\n      223,\n      183,\n      170,\n      213,\n      119,\n      248,\n      152,\n      2,\n      44,\n      154,\n      163,\n      70,\n      221,\n      153,\n      101,\n      155,\n      167,\n      43,\n      172,\n      9,\n      129,\n      22,\n      39,\n      253,\n      19,\n      98,\n      108,\n      110,\n      79,\n      113,\n      224,\n      232,\n      178,\n      185,\n      112,\n      104,\n      218,\n      246,\n      97,\n      228,\n      251,\n      34,\n      242,\n      193,\n      238,\n      210,\n      144,\n      12,\n      191,\n      179,\n      162,\n      241,\n      81,\n      51,\n      145,\n      235,\n      249,\n      14,\n      239,\n      107,\n      49,\n      192,\n      214,\n      31,\n      181,\n      199,\n      106,\n      157,\n      184,\n      84,\n      204,\n      176,\n      115,\n      121,\n      50,\n      45,\n      127,\n      4,\n      150,\n      254,\n      138,\n      236,\n      205,\n      93,\n      222,\n      114,\n      67,\n      29,\n      24,\n      72,\n      243,\n      141,\n      128,\n      195,\n      78,\n      66,\n      215,\n      61,\n      156,\n      180,\n    ]\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = new Array(512)\n    this.gradP = new Array<Grad>(512)\n\n    // Skewing and unskewing factors for 2, 3, and 4 dimensions\n    this.F2 = 0.5 * (Math.sqrt(3) - 1)\n    this.G2 = (3 - Math.sqrt(3)) / 6\n\n    this.F3 = 1 / 3\n    this.G3 = 1 / 6\n\n    this.seed(seed ? seed : Math.random())\n  }\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  static seed(seed: number) {\n    if (!this.initialized) {\n      this.Init()\n    }\n\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536\n    }\n\n    seed = Math.floor(seed)\n    if (seed < 256) {\n      seed |= seed << 8\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v\n      if (i & 1) {\n        v = this.p[i] ^ (seed & 255)\n      } else {\n        v = this.p[i] ^ ((seed >> 8) & 255)\n      }\n\n      this.perm[i] = this.perm[i + 256] = v\n      this.gradP[i] = this.gradP[i + 256] = this.grad3[v % 12]\n    }\n  }\n\n  /*\n\t\t  for(var i=0; i<256; i++) {\n\t\t\tperm[i] = perm[i + 256] = p[i];\n\t\t\tgradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n\t\t  }*/\n\n  // 2D simplex noise\n  static simplex2(xin: number, yin: number) {\n    if (!this.initialized) {\n      this.Init()\n    }\n    var n0, n1, n2 // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin) * this.F2 // Hairy factor for 2D\n    var i = Math.floor(xin + s)\n    var j = Math.floor(yin + s)\n    var t = (i + j) * this.G2\n    var x0 = xin - i + t // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1 // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1\n      j1 = 0\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0\n      j1 = 1\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + this.G2 // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + this.G2\n    var x2 = x0 - 1 + 2 * this.G2 // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * this.G2\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255\n    j &= 255\n    var gi0 = this.gradP[i + this.perm[j]]\n    var gi1 = this.gradP[i + i1 + this.perm[j + j1]]\n    var gi2 = this.gradP[i + 1 + this.perm[j + 1]]\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0\n    if (t0 < 0) {\n      n0 = 0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * gi0.dot2(x0, y0) // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1 * x1 - y1 * y1\n    if (t1 < 0) {\n      n1 = 0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * gi1.dot2(x1, y1)\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2\n    if (t2 < 0) {\n      n2 = 0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * gi2.dot2(x2, y2)\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2)\n  }\n\n  // 3D simplex noise\n  static simplex3(xin: number, yin: number, zin: number) {\n    if (!this.initialized) {\n      this.Init()\n    }\n    var n0, n1, n2, n3 // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin + zin) * this.F3 // Hairy factor for 2D\n    var i = Math.floor(xin + s)\n    var j = Math.floor(yin + s)\n    var k = Math.floor(zin + s)\n\n    var t = (i + j + k) * this.G3\n    var x0 = xin - i + t // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t\n    var z0 = zin - k + t\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1 // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2 // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1\n        j1 = 0\n        k1 = 0\n        i2 = 1\n        j2 = 1\n        k2 = 0\n      } else if (x0 >= z0) {\n        i1 = 1\n        j1 = 0\n        k1 = 0\n        i2 = 1\n        j2 = 0\n        k2 = 1\n      } else {\n        i1 = 0\n        j1 = 0\n        k1 = 1\n        i2 = 1\n        j2 = 0\n        k2 = 1\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0\n        j1 = 0\n        k1 = 1\n        i2 = 0\n        j2 = 1\n        k2 = 1\n      } else if (x0 < z0) {\n        i1 = 0\n        j1 = 1\n        k1 = 0\n        i2 = 0\n        j2 = 1\n        k2 = 1\n      } else {\n        i1 = 0\n        j1 = 1\n        k1 = 0\n        i2 = 1\n        j2 = 1\n        k2 = 0\n      }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + this.G3 // Offsets for second corner\n    var y1 = y0 - j1 + this.G3\n    var z1 = z0 - k1 + this.G3\n\n    var x2 = x0 - i2 + 2 * this.G3 // Offsets for third corner\n    var y2 = y0 - j2 + 2 * this.G3\n    var z2 = z0 - k2 + 2 * this.G3\n\n    var x3 = x0 - 1 + 3 * this.G3 // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * this.G3\n    var z3 = z0 - 1 + 3 * this.G3\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255\n    j &= 255\n    k &= 255\n    var gi0 = this.gradP[i + this.perm[j + this.perm[k]]]\n    var gi1 = this.gradP[i + i1 + this.perm[j + j1 + this.perm[k + k1]]]\n    var gi2 = this.gradP[i + i2 + this.perm[j + j2 + this.perm[k + k2]]]\n    var gi3 = this.gradP[i + 1 + this.perm[j + 1 + this.perm[k + 1]]]\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0\n    if (t0 < 0) {\n      n0 = 0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0) // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1\n    if (t1 < 0) {\n      n1 = 0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1)\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2\n    if (t2 < 0) {\n      n2 = 0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2)\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3\n    if (t3 < 0) {\n      n3 = 0\n    } else {\n      t3 *= t3\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3)\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3)\n  }\n\n  // ##### Perlin noise stuff\n\n  static fade(t: number) {\n    return t * t * t * (t * (t * 6 - 15) + 10)\n  }\n\n  static lerp(a: number, b: number, t: number) {\n    return (1 - t) * a + t * b\n  }\n\n  // 2D Perlin Noise\n  static perlin2(x: number, y: number) {\n    if (!this.initialized) {\n      this.Init()\n    }\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y)\n    //   console.log(\"floored X \" + x);\n    // Get relative xy coordinates of point within that cell\n    x = x - X\n    y = y - Y\n    //     console.log(\"relative X \" + x);\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255\n    Y = Y & 255\n    //    console.log(\"relative X \" + x);\n    //  console.log(\"calc \" + calc);\n    //  console.log(\"dot2 \" + calc.dot2(x,y));\n    // Calculate noise contributions from each of the four corners\n    var n00 = this.gradP[X + this.perm[Y]].dot2(x, y)\n    var n01 = this.gradP[X + this.perm[Y + 1]].dot2(x, y - 1)\n    var n10 = this.gradP[X + 1 + this.perm[Y]].dot2(x - 1, y)\n    var n11 = this.gradP[X + 1 + this.perm[Y + 1]].dot2(x - 1, y - 1)\n    /*\n\t\t\t  console.log(\"n00 \" + n00);\n\t\t\t  console.log(\"n01 \" + n01);\n\t\t\t  console.log(\"n10 \" + n10);\n\t\t\t  console.log(\"n11 \" + n11);\n\t */\n    // Compute the fade curve value for x\n    var u = this.fade(x)\n    //console.log(\"fade x \" + x);\n    //console.log(\"u \" + u);\n    // Interpolate the four results\n    return this.lerp(\n      this.lerp(n00, n10, u),\n      this.lerp(n01, n11, u),\n      this.fade(y)\n    )\n  }\n\n  // 3D Perlin Noise\n  static perlin3(x: number, y: number, z: number) {\n    if (!this.initialized) {\n      this.Init()\n    }\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y),\n      Z = Math.floor(z)\n    // Get relative xyz coordinates of point within that cell\n    x = x - X\n    y = y - Y\n    z = z - Z\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255\n    Y = Y & 255\n    Z = Z & 255\n\n    // Calculate noise contributions from each of the eight corners\n    var n000 = this.gradP[X + this.perm[Y + this.perm[Z]]].dot3(x, y, z)\n    var n001 = this.gradP[X + this.perm[Y + this.perm[Z + 1]]].dot3(x, y, z - 1)\n    var n010 = this.gradP[X + this.perm[Y + 1 + this.perm[Z]]].dot3(x, y - 1, z)\n    var n011 = this.gradP[X + this.perm[Y + 1 + this.perm[Z + 1]]].dot3(\n      x,\n      y - 1,\n      z - 1\n    )\n    var n100 = this.gradP[X + 1 + this.perm[Y + this.perm[Z]]].dot3(x - 1, y, z)\n    var n101 = this.gradP[X + 1 + this.perm[Y + this.perm[Z + 1]]].dot3(\n      x - 1,\n      y,\n      z - 1\n    )\n    var n110 = this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z]]].dot3(\n      x - 1,\n      y - 1,\n      z\n    )\n    var n111 = this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]].dot3(\n      x - 1,\n      y - 1,\n      z - 1\n    )\n\n    // Compute the fade curve value for x, y, z\n    var u = this.fade(x)\n    var v = this.fade(y)\n    var w = this.fade(z)\n\n    // Interpolate\n    return this.lerp(\n      this.lerp(this.lerp(n000, n100, u), this.lerp(n001, n101, u), w),\n      this.lerp(this.lerp(n010, n110, u), this.lerp(n011, n111, u), w),\n      v\n    )\n  }\n}\n\nexport class Grad {\n  public vector: Vector3\n  constructor(x: number, y: number, z: number) {\n    this.vector = new Vector3(x, y, z)\n  }\n\n  dot2(x: number, y: number) {\n    return this.vector.x * x + this.vector.y * y\n  }\n  dot3(x: number, y: number, z: number) {\n    return this.vector.x * x + this.vector.y * y + this.vector.z * z\n  }\n}\n"],"names":[],"mappings":";;;;;;;MAAA;OA6nBC;MAlnBQ,UAAI,GAAX,UAAY,IAAa;UACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;UACvB,IAAI,CAAC,KAAK,GAAG;cACX,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cACjB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cAClB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;cAClB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;cACnB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cACjB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cAClB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;cAClB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;cACnB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cACjB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;cAClB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;cAClB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;WACpB,CAAA;UAED,IAAI,CAAC,CAAC,GAAG;cACP,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,CAAC;cACD,GAAG;cACH,GAAG;cACH,EAAE;cACF,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,CAAC;cACD,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,CAAC;cACD,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,CAAC;cACD,EAAE;cACF,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,CAAC;cACD,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,CAAC;cACD,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,CAAC;cACD,GAAG;cACH,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,GAAG;cACH,EAAE;cACF,GAAG;cACH,EAAE;cACF,EAAE;cACF,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,EAAE;cACF,EAAE;cACF,GAAG;cACH,GAAG;cACH,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"}